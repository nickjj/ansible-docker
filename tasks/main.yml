---
- name: Disable pinned Docker version
  ansible.builtin.file:
    dest: "/etc/apt/preferences.d/docker.pref"
    state: "absent"
  when: not docker__version | d()

- name: Disable pinned Docker Compose v2 version
  ansible.builtin.file:
    dest: "/etc/apt/preferences.d/docker-compose-plugin.pref"
    state: "absent"
  when: not docker__compose_v2_version | d()

- name: Enable pinned Docker version
  ansible.builtin.template:
    src: "etc/apt/preferences.d/docker.pref.j2"
    dest: "/etc/apt/preferences.d/docker.pref"
    owner: "root"
    group: "root"
    mode: "0644"
  when: docker__version | d()

- name: Enable pinned Docker Compose v2 version
  ansible.builtin.template:
    src: "etc/apt/preferences.d/docker-compose-plugin.pref.j2"
    dest: "/etc/apt/preferences.d/docker-compose-plugin.pref"
    owner: "root"
    group: "root"
    mode: "0644"
  when: docker__compose_v2_version | d()

- name: Install Docker's dependencies
  retries: 20
  delay: 15
  ansible.builtin.apt:
    name: "{{ docker__package_dependencies + docker__pip_dependencies }}"

- name: Create /etc/apt/keyrings directory
  ansible.builtin.file:
    path: "/etc/apt/keyrings"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Add Docker's APT repository key
  ansible.builtin.get_url:
    url: "{{ docker__apt_repository_url }}/gpg"
    dest: "/etc/apt/keyrings/docker.asc"
    checksum: "{{ docker__apt_key_checksum }}"
    owner: "root"
    group: "root"
    mode: "0644"

- name: Configure Docker's upstream APT repository
  ansible.builtin.apt_repository:
    repo: "{{ docker__apt_repository }}"
    update_cache: true

- name: Create Docker configuration directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    owner: "root"
    group: "root"
    mode: "0755"
  loop:
    - "/etc/docker"
    - "/etc/systemd/system/docker.service.d"

- name: Configure Docker daemon options (json)
  ansible.builtin.template:
    src: "etc/docker/daemon.json.j2"
    dest: "/etc/docker/daemon.json"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: ["Restart Docker"]

# If the file doesn't exist don't run the detection step
- name: Check if OS version file exists
  stat:
    path: "{{ docker__pip_virtualenv }}/os-version.txt"
  register: os_file_exists

# This file gets created at the very end after the virtualenv is created
# All subsequent runs the file should exist, and we can do the detection. If
# the OS upgrades, the contents of the file won't match and we will will trigger
# the upgrade case.
- name: Detect OS changed
  ansible.builtin.lineinfile:
    path: "{{ docker__pip_virtualenv }}/os-version.txt"
    state: "present"
    line: "{{ ansible_distribution_version}}"
    mode: "0644"
  when:  os_file_exists.stat.exists == True
  register: os_changed

- name: Handle upgrade case
  ansible.builtin.file:
    path: "{{ docker__pip_virtualenv }}"
    state: "absent"
  when: os_changed.changed

- name: Install Docker and Docker Compose v2
  retries: 20
  delay: 15
  ansible.builtin.apt:
    name:
      - "docker-ce"
      - "docker-ce-cli"
      - "docker-ce-rootless-extras"
      - "docker-compose-plugin"
    state: "{{ docker__state }}"

- name: Install Python packages
  ansible.builtin.pip:
    name: >
      {{ item.name }}{% if item.version | d() %}=={{ item.version }}{% endif %}
    virtualenv: "{{ docker__pip_virtualenv }}"
    virtualenv_python: "python3"
    state: "{{ item.state | d('present') }}"
  loop: "{{ docker__default_pip_packages + docker__pip_packages }}"
  when: item.name | d()

- name: Create python3-docker proxy script to access Virtualenv's interpreter
  ansible.builtin.template:
    src: "usr/local/bin/python3-docker.j2"
    dest: "/usr/local/bin/python3-docker"
    owner: "root"
    group: "root"
    mode: "0755"

- name: Symlink selected Python package binaries to /usr/local/bin
  ansible.builtin.file:
    path: "{{ item.path }}"
    src: "{{ item.src }}"
    force: true
    state: "link"
  loop: "{{ docker__default_pip_packages + docker__pip_packages }}"
  when:
    - item.state | d("present") != "absent"
    - item.path | d() and item.src | d()

- name: Add user(s) to "docker" group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: "docker"
    append: true
  loop: "{{ docker__users }}"

- name: Configure Docker daemon options (flags)
  ansible.builtin.template:
    src: "etc/systemd/system/docker.service.d/options.conf.j2"
    dest: "/etc/systemd/system/docker.service.d/options.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: ["Reload systemd daemon", "Restart Docker"]

- name: Configure Docker daemon environment variables
  ansible.builtin.template:
    src: "etc/systemd/system/docker.service.d/environment.conf.j2"
    dest: "/etc/systemd/system/docker.service.d/environment.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: ["Reload systemd daemon", "Restart Docker"]

- name: Configure custom systemd unit file override
  ansible.builtin.template:
    src: "etc/systemd/system/docker.service.d/custom.conf.j2"
    dest: "/etc/systemd/system/docker.service.d/custom.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  notify: ["Reload systemd daemon", "Restart Docker"]

- name: Restart Docker now to make sure `docker login` works
  ansible.builtin.meta: "flush_handlers"

# It's safe to ignore no-log-password because we're removing the password from
# the output with the loop_control property.
- name: Manage Docker registry login credentials
  community.docker.docker_login: # noqa no-log-password
    registry_url: "{{ item.registry_url | d(omit) }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    email: "{{ item.email | d(omit) }}"
    reauthorize: "{{ item.reauthorize | d(omit) }}"
    config_path: "{{ item.config_path | d(omit) }}"
    state: "{{ item.state | d('present') }}"
  loop: "{{ docker__registries }}"
  loop_control:
    label: '{{ {"registry_url": item.registry_url | d("https://index.docker.io/v1/"), "username": item.username, "state": item.state | d("present")} }}' # yamllint disable-line rule:line-length
  when: item.username | d() and item.password | d()
  become: true
  become_user: "{{ docker__login_become_user | d('root') }}"
  vars:
    ansible_python_interpreter: "{{ '/usr/local/bin/python3-docker' }}"

- name: Remove Docker related cron jobs
  ansible.builtin.file:
    path: "/etc/cron.d/{{ item.cron_file }}"
    state: "absent"
  loop: "{{ docker__cron_jobs }}"
  when:
    - item.state | d("present") == "absent"
    - item.cron_file | d()

- name: Create Docker related cron jobs
  ansible.builtin.cron:
    name: "{{ item.name }}"
    job: "{{ item.job }}"
    minute: "{{ item.schedule[0] }}"
    hour: "{{ item.schedule[1] }}"
    day: "{{ item.schedule[2] }}"
    month: "{{ item.schedule[3] }}"
    weekday: "{{ item.schedule[4] }}"
    cron_file: "{{ item.cron_file }}"
    user: "{{ item.user | d('root') }}"
  loop: "{{ docker__cron_jobs }}"
  when:
    - item.state | d("present") != "absent"
    - item.name | d() and item.job | d()
    - item.schedule | d() and item.cron_file | d()

- name: Create file to detect OS changes
  ansible.builtin.lineinfile:
    path: "{{ docker__pip_virtualenv }}/os-version.txt"
    state: "present"
    create: true
    line: "{{ ansible_distribution_version}}"
    mode: "0644"
